import json
import requests
from django.conf import settings

GROQ_API_URL = "https://api.groq.com/openai/v1/chat/completions"
GROQ_MODEL = "llama-3.1-8b-instant"  # Alternativa de m√°s calidad: "llama-3.3-70b-versatile"

def generar_explicacion_modalidad(modalidad, respuestas):
    # Asegura que 'respuestas' sea texto legible (por si es dict/list)
    if not isinstance(respuestas, str):
        try:
            respuestas = json.dumps(respuestas, ensure_ascii=False)
        except Exception:
            respuestas = str(respuestas)

    # === SOLO CAMBIA ESTE BLOQUE: system_msg y user_prompt ===
    system_msg = (
        "Eres un orientador vocacional emp√°tico y claro. Responde SIEMPRE en espa√±ol de Colombia, "
        "con tono juvenil, respetuoso y motivador. Extensi√≥n objetivo: 90‚Äì130 palabras. "
        "Estructura obligatoria en 3 partes con t√≠tulos: "
        "1) Por qu√© encaja, 2) Qu√© aprender√°/har√° all√≠, 3) Siguientes pasos. "
        "No uses tecnicismos innecesarios; evita promesas de empleo garantizado o salarios. "
        "S√© espec√≠fico y conecta con intereses del/la estudiante seg√∫n sus respuestas. "
        "Si algo no aplica, om√≠telo sin inventar. Cierra con una invitaci√≥n breve a explorar m√°s."
    )

    user_prompt = f'''
Contexto del proyecto:
Estudiantes de grado 9 del INEM responden un test (escala 1‚Äì4: 1=No me interesa, 4=Me gusta). 
El sistema sugiere una modalidad t√©cnica llamada: "{modalidad}". 
Debes justificarla usando √öNICAMENTE el perfil de egresado de esa modalidad/especialidad y las respuestas del test.

Instrucciones de interpretaci√≥n de respuestas:
- Identifica patrones (p. ej., puntajes 3‚Äì4 en preguntas ligadas a creatividad, l√≥gica, ayuda social, sistemas, organizaci√≥n, etc.).
- No enumeres todas las respuestas; resume tendencias (intereses altos/medios/bajos).
- Relaciona esas tendencias con tareas/ambientes reales de la modalidad elegida.

Perfiles de egresado (elige SOLO la secci√≥n que coincida exactamente con la modalidad; si es sub-especialidad, usa la sub-especialidad):

‚Äî Acad√©mico
‚Ä¢ Observaci√≥n rigurosa, formulaci√≥n de hip√≥tesis, dise√±o de experimentos y amor por la verdad y el conocimiento.
‚Ä¢ Argumentaci√≥n √©tica, pensamiento cr√≠tico y creatividad cient√≠fica en favor de un desarrollo sostenible.

‚Äî Agropecuaria (procesamiento de alimentos)
‚Ä¢ Alistamiento, limpieza y desinfecci√≥n; empaque y apoyo a control de procesos en plantas de alimentos y bebidas.
‚Ä¢ Perfil operativo/asistencial en panader√≠a, l√°cteos y fruver; enfoque en calidad y normativas b√°sicas.

‚Äî Comercio ‚Äî Emprendimiento y Fomento Empresarial
‚Ä¢ Crear microempresas, apoyar administraci√≥n de negocios, asesor√≠a de ventas.
‚Ä¢ Planear, organizar y comunicar propuestas de valor y acciones comerciales.

‚Äî Comercio ‚Äî Dise√±o Gr√°fico
‚Ä¢ Apoyo a departamentos de publicidad: dise√±o de piezas, originales de impresi√≥n, criterios de color y tipograf√≠a.
‚Ä¢ Producci√≥n gr√°fica con claridad y precisi√≥n para medios impresos y digitales.

‚Äî Comercio ‚Äî Contabilidad y Finanzas
‚Ä¢ Apoyo contable y financiero: registrar, procesar, interpretar y conservar informaci√≥n (manual y sistematizada).
‚Ä¢ Roles t√≠picos: auxiliar contable/financiero/facturaci√≥n/n√≥mina/tesorer√≠a.

‚Äî Industrial ‚Äî Mantenimiento de Hardware y Software
‚Ä¢ Soporte a infraestructura TI: instalaci√≥n/configuraci√≥n, diagn√≥stico b√°sico, responsabilidad y buenas pr√°cticas.
‚Ä¢ Aporte a continuidad operativa en organizaciones p√∫blicas/privadas.

‚Äî Industrial ‚Äî Electricidad y Electr√≥nica
‚Ä¢ An√°lisis de circuitos, instalaci√≥n de redes internas, mantenimiento e instalaci√≥n el√©ctrica/electr√≥nica.
‚Ä¢ Posibles roles: t√©cnico/auxiliar en mantenimiento, dise√±o de redes, domicilia, electrodom√©sticos, seguridad.

‚Äî Industrial ‚Äî Rob√≥tica
‚Ä¢ Electr√≥nica + programaci√≥n para automatizaci√≥n; diagn√≥stico de circuitos; configuraci√≥n de c√≥mputo; registro t√©cnico.
‚Ä¢ Apoyo a digitalizaci√≥n/automatizaci√≥n y programaci√≥n de operaciones; roles de auxiliar/analista programador.

‚Äî Promoci√≥n Social ‚Äî Primera Infancia
‚Ä¢ Acompa√±amiento pedag√≥gico a desarrollo integral en educaci√≥n inicial/preescolar.
‚Ä¢ Base para continuar cadena de formaci√≥n en atenci√≥n y cuidado de la primera infancia.

‚Äî Promoci√≥n Social ‚Äî Seguridad y Salud en el Trabajo
‚Ä¢ Apoyo al SG-SST seg√∫n normatividad laboral; identificaci√≥n de riesgos, cultura de autocuidado.
‚Ä¢ Roles: auxiliar de prevenci√≥n, seguridad industrial/laboral, t√©cnico de seguridad.

‚Äî Promoci√≥n Social ‚Äî Promoci√≥n de la Salud
‚Ä¢ Apoyo comunitario para promoci√≥n y mantenimiento de la salud; competencias laborales sociales/comunitarias.
‚Ä¢ Base para continuar estudios en √°reas de la salud y lo social.

Respuestas del test (1=No me interesa, 4=Me gusta):
{respuestas}

Tu tarea:
1) Usa SOLO el perfil que coincida con "{modalidad}" (si trae guion o categor√≠a, p. ej. "Comercio ‚Äî Contabilidad y Finanzas", usa esa sub-secci√≥n).
2) Relaciona tendencias de las respuestas con tareas/entornos de la modalidad (ej.: si hay gusto por creatividad ‚Üí Dise√±o Gr√°fico; si hay gusto por organizar y manejar n√∫meros ‚Üí Contabilidad, etc.).
3) Formatea exactamente as√≠ (sin emojis en los t√≠tulos):

Por qu√© te lo sugerimos: ‚Ä¶
Qu√© aprender√°s: ‚Ä¶
Siguientes pasos: ‚Ä¶

4) Mant√©n 90‚Äì130 palabras, lenguaje juvenil y concreto.
'''.strip()
    # === FIN DEL BLOQUE EDITADO ===

    headers = {
        "Authorization": f"Bearer {settings.GROQ_API_KEY}",
        "Content-Type": "application/json",
    }

    data = {
        "model": GROQ_MODEL,
        "messages": [
            {"role": "system", "content": system_msg},
            {"role": "user", "content": user_prompt},
        ],
        # Opcional: ajusta a tu gusto
        "temperature": 0.7,
        "max_tokens": 300,
    }

    try:
        response = requests.post(GROQ_API_URL, headers=headers, json=data, timeout=30)

        # Logs √∫tiles para depuraci√≥n
        print("üü° Groq status:", response.status_code)
        try:
            print("üü° Groq response body:", response.text[:2000])
        except Exception:
            pass

        if response.status_code == 200:
            payload = response.json()
            return payload["choices"][0]["message"]["content"].strip()

        # Devuelve el mensaje de error de Groq para saber exactamente qu√© pas√≥
        try:
            err = response.json()
        except Exception:
            err = {"raw": response.text}
        return f"No se pudo generar la explicaci√≥n (status {response.status_code}): {err}"

    except requests.Timeout:
        return "Error: tiempo de espera agotado al conectar con Groq."
    except Exception as e:
        print("üî¥ Error al conectar con Groq:", str(e))
        return f"Error al conectar con Groq: {str(e)}"
